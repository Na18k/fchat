# +----------------------------------------+
# |                                        |
# |   ___                            _     |
# |  |_ _|_ __ ___  _ __   ___  _ __| |_   |
# |   | || '_ ` _ \| '_ \ / _ \| '__| __|  |
# |   | || | | | | | |_) | (_) | |  | |_   |
# |  |___|_| |_| |_| .__/ \___/|_|   \__|  |
# |                |_|                     |
# |                                        |
# +----------------------------------------+
import hashlib
import random
import string


# +-------------------------------+
# |                               |
# |   ___                   _     |
# |  |_ _|_ __  _ __  _   _| |_   |
# |   | || '_ \| '_ \| | | | __|  |
# |   | || | | | |_) | |_| | |_   |
# |  |___|_| |_| .__/ \__,_|\__|  |
# |            |_|                |
# |                               |
# +-------------------------------+
def entry(msg):
    return input(msg)
    

#+------------------------------------------------+
# |                                                |
# |   __  __                                       |
# |  |  \/  | ___  ___ ___  __ _  __ _  ___  ___   |
# |  | |\/| |/ _ \/ __/ __|/ _` |/ _` |/ _ \/ __|  |
# |  | |  | |  __/\__ \__ \ (_| | (_| |  __/\__ \  |
# |  |_|  |_|\___||___/___/\__,_|\__, |\___||___/  |
# |                              |___/             |
# |                                                |
# +------------------------------------------------+
def msg(message, type_msg="", lang=None):
    # Para fácil manutenção!
    # Caso o sistema no futuro mude
    if type_msg == '':
        print(message)

    elif type_msg == "system":
        print(f'[{lang["system_lang"]}]: {message}')

    elif type_msg == "system" and lang == None:
        # Se não for caregado a linguagem
        print(f'[SYSTEM]: {message}')



class MSGSystem:
    def __init__(self, lang, langs_db):
        self.lang_msg = langs_db[lang]

    def separator(self):
        msg("+==============================================+")

    def welcome(self):
        msg(f"""
            +---------------------------------------------------------+
            |                                                         |
            |  __        __   _                            _          |
            |  \ \      / /__| | ___ ___  _ __ ___   ___  | |_ ___    |
            |   \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \   |
            |    \ V  V /  __/ | (_| (_) | | | | | |  __/ | || (_) |  |
            |     \_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/   |
            |                                                         |
            |    _____ ____ _           _                             |
            |   |  ___/ ___| |__   __ _| |_                           |
            |   | |_ | |   | '_ \ / _` | __|                          |
            |   |  _|| |___| | | | (_| | |_                           |
            |   |_|   \____|_| |_|\__,_|\__|                          |
            |                                                         |
            +---------------------------------------------------------+

            {self.lang_msg["help_command_info"]}
        """)

    def break_space(self, length_space=10):

        cont = 0
        while cont <= length_space:
            msg(" ")
            cont+=1


# +---------------------------------------------------------------------------------------+
# |                                                                                       |
# |   _____                 _ _   _                   ____            _                   |
# |  |  ___|   _ _ __   ___(_) |_(_) ___  _ __  ___  / ___| _   _ ___| |_ ___ _ __ ___    |
# |  | |_ | | | | '_ \ / __| | __| |/ _ \| '_ \/ __| \___ \| | | / __| __/ _ \ '_ ` _ \   |
# |  |  _|| |_| | | | | (__| | |_| | (_) | | | \__ \  ___) | |_| \__ \ ||  __/ | | | | |  |
# |  |_|   \__,_|_| |_|\___|_|\__|_|\___/|_| |_|___/ |____/ \__, |___/\__\___|_| |_| |_|  |
# |                                                         |___/                         |
# |                                                                                       |
# +---------------------------------------------------------------------------------------+


def hash_data(data):
    """
    Retorna o hash SHA-256 dos dados fornecidos.
    """
    return hashlib.sha256(data.encode('utf-8')).hexdigest()

def generate_user_id():
    """
    Gera um ID de usuário único com letras maiúsculas e números.
    """
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))